// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polyarray.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Segment compress elements with several polynomials.
// Number of elements in a Segment must be power of 2 in order to speed up
// Get().
//
// Since 0.5.2
type Segment struct {
	EltWidth             uint32    `protobuf:"varint,1,opt,name=EltWidth,proto3" json:"EltWidth,omitempty"`
	EltMask              int32     `protobuf:"varint,2,opt,name=EltMask,proto3" json:"EltMask,omitempty"`
	WordCapWidth         uint32    `protobuf:"varint,3,opt,name=WordCapWidth,proto3" json:"WordCapWidth,omitempty"`
	WordCapMask          int32     `protobuf:"varint,4,opt,name=WordCapMask,proto3" json:"WordCapMask,omitempty"`
	Polynomials          []float64 `protobuf:"fixed64,10,rep,packed,name=Polynomials,proto3" json:"Polynomials,omitempty"`
	Starts               []int32   `protobuf:"varint,11,rep,packed,name=Starts,proto3" json:"Starts,omitempty"`
	Words                []int64   `protobuf:"varint,12,rep,packed,name=Words,proto3" json:"Words,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Segment) Reset()         { *m = Segment{} }
func (m *Segment) String() string { return proto.CompactTextString(m) }
func (*Segment) ProtoMessage()    {}
func (*Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_polyarray_c4b76438d15e0928, []int{0}
}
func (m *Segment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Segment.Unmarshal(m, b)
}
func (m *Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Segment.Marshal(b, m, deterministic)
}
func (dst *Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Segment.Merge(dst, src)
}
func (m *Segment) XXX_Size() int {
	return xxx_messageInfo_Segment.Size(m)
}
func (m *Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_Segment proto.InternalMessageInfo

func (m *Segment) GetEltWidth() uint32 {
	if m != nil {
		return m.EltWidth
	}
	return 0
}

func (m *Segment) GetEltMask() int32 {
	if m != nil {
		return m.EltMask
	}
	return 0
}

func (m *Segment) GetWordCapWidth() uint32 {
	if m != nil {
		return m.WordCapWidth
	}
	return 0
}

func (m *Segment) GetWordCapMask() int32 {
	if m != nil {
		return m.WordCapMask
	}
	return 0
}

func (m *Segment) GetPolynomials() []float64 {
	if m != nil {
		return m.Polynomials
	}
	return nil
}

func (m *Segment) GetStarts() []int32 {
	if m != nil {
		return m.Starts
	}
	return nil
}

func (m *Segment) GetWords() []int64 {
	if m != nil {
		return m.Words
	}
	return nil
}

// PolyArray uses one or more polynomial to compress and store an array of int64.
//
// Since 0.5.2
type PolyArray struct {
	SegWidth             uint32     `protobuf:"varint,1,opt,name=SegWidth,proto3" json:"SegWidth,omitempty"`
	SegMask              int32      `protobuf:"varint,2,opt,name=SegMask,proto3" json:"SegMask,omitempty"`
	N                    int32      `protobuf:"varint,10,opt,name=N,proto3" json:"N,omitempty"`
	Segments             []*Segment `protobuf:"bytes,20,rep,name=Segments,proto3" json:"Segments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PolyArray) Reset()         { *m = PolyArray{} }
func (m *PolyArray) String() string { return proto.CompactTextString(m) }
func (*PolyArray) ProtoMessage()    {}
func (*PolyArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_polyarray_c4b76438d15e0928, []int{1}
}
func (m *PolyArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolyArray.Unmarshal(m, b)
}
func (m *PolyArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolyArray.Marshal(b, m, deterministic)
}
func (dst *PolyArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolyArray.Merge(dst, src)
}
func (m *PolyArray) XXX_Size() int {
	return xxx_messageInfo_PolyArray.Size(m)
}
func (m *PolyArray) XXX_DiscardUnknown() {
	xxx_messageInfo_PolyArray.DiscardUnknown(m)
}

var xxx_messageInfo_PolyArray proto.InternalMessageInfo

func (m *PolyArray) GetSegWidth() uint32 {
	if m != nil {
		return m.SegWidth
	}
	return 0
}

func (m *PolyArray) GetSegMask() int32 {
	if m != nil {
		return m.SegMask
	}
	return 0
}

func (m *PolyArray) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *PolyArray) GetSegments() []*Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func init() {
	proto.RegisterType((*Segment)(nil), "Segment")
	proto.RegisterType((*PolyArray)(nil), "PolyArray")
}

func init() { proto.RegisterFile("polyarray.proto", fileDescriptor_polyarray_c4b76438d15e0928) }

var fileDescriptor_polyarray_c4b76438d15e0928 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x6a, 0xc3, 0x30,
	0x14, 0x45, 0x51, 0x14, 0x27, 0xe9, 0xb3, 0x4b, 0xe1, 0x11, 0xca, 0xa3, 0x93, 0x30, 0x1d, 0x34,
	0x65, 0x68, 0xbf, 0xa0, 0x2d, 0x19, 0x1b, 0x8a, 0x3c, 0x04, 0xba, 0x29, 0xc4, 0xb8, 0xa1, 0x4a,
	0x64, 0x24, 0x75, 0xf0, 0x87, 0xf6, 0x7f, 0x82, 0x14, 0x27, 0xd8, 0xe3, 0xb9, 0xd2, 0xbd, 0x70,
	0x1e, 0x3c, 0xb4, 0xd6, 0x74, 0xda, 0x39, 0xdd, 0xad, 0x5a, 0x67, 0x83, 0x2d, 0xff, 0x19, 0xcc,
	0xab, 0xba, 0x39, 0xd6, 0xa7, 0x80, 0x4f, 0xb0, 0x58, 0x9b, 0xb0, 0x3d, 0xec, 0xc3, 0x0f, 0x31,
	0xc1, 0xe4, 0xbd, 0xba, 0x31, 0x12, 0xcc, 0xd7, 0x26, 0x7c, 0x6a, 0xff, 0x4b, 0x13, 0xc1, 0x64,
	0xa6, 0xae, 0x88, 0x25, 0x14, 0x5b, 0xeb, 0xf6, 0x1f, 0xba, 0xbd, 0x34, 0x79, 0x6a, 0x8e, 0x32,
	0x14, 0x90, 0xf7, 0x9c, 0x16, 0xa6, 0x69, 0x61, 0x18, 0xc5, 0x1f, 0x5f, 0xd6, 0x74, 0x27, 0x7b,
	0x3c, 0x68, 0xe3, 0x09, 0x04, 0x97, 0x4c, 0x0d, 0x23, 0x7c, 0x84, 0x59, 0x15, 0xb4, 0x0b, 0x9e,
	0x72, 0xc1, 0x65, 0xa6, 0x7a, 0xc2, 0x25, 0x64, 0x71, 0xc8, 0x53, 0x21, 0xb8, 0xe4, 0xea, 0x02,
	0xe5, 0x1f, 0xdc, 0xc5, 0xf2, 0x5b, 0x54, 0x8d, 0x62, 0x55, 0xdd, 0x8c, 0xc4, 0xae, 0x1c, 0xc5,
	0xaa, 0xba, 0x19, 0x8a, 0xf5, 0x88, 0x05, 0xb0, 0x0d, 0x41, 0xca, 0xd8, 0x06, 0x9f, 0xd3, 0x46,
	0xbc, 0x93, 0xa7, 0xa5, 0xe0, 0x32, 0x7f, 0x59, 0xac, 0xfa, 0x40, 0xdd, 0x5e, 0xde, 0xa7, 0xdf,
	0x93, 0x76, 0xb7, 0x9b, 0xa5, 0xdb, 0xbe, 0x9e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xbf, 0xfe,
	0xfb, 0x6e, 0x01, 0x00, 0x00,
}
