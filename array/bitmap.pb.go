// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bitmap.proto

package array

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Bitmap is an array of bits
// with rank(how many 1 upto position x, excluding x) index.
// Width option dense, it compresses rank index thus reduces memory usage but a query takes more
// time, about 14 ns.
type Bitmap struct {
	// Flags provides options
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// N is the max index of present elt + 1
	N int32 `protobuf:"varint,10,opt,name=N,proto3" json:"N,omitempty"`
	// Words contains bitmap
	Words []uint64 `protobuf:"varint,20,rep,packed,name=Words,proto3" json:"Words,omitempty"`
	// RandIndex speeds up rank() by pre-calcuate it
	// Choose by Flags
	RankIndex            []int32    `protobuf:"varint,30,rep,packed,name=RankIndex,proto3" json:"RankIndex,omitempty"`
	RankIndexDense       *PolyArray `protobuf:"bytes,31,opt,name=RankIndexDense,proto3" json:"RankIndexDense,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Bitmap) Reset()         { *m = Bitmap{} }
func (m *Bitmap) String() string { return proto.CompactTextString(m) }
func (*Bitmap) ProtoMessage()    {}
func (*Bitmap) Descriptor() ([]byte, []int) {
	return fileDescriptor_bitmap_66c9c2c6b1caf771, []int{0}
}
func (m *Bitmap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bitmap.Unmarshal(m, b)
}
func (m *Bitmap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bitmap.Marshal(b, m, deterministic)
}
func (dst *Bitmap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bitmap.Merge(dst, src)
}
func (m *Bitmap) XXX_Size() int {
	return xxx_messageInfo_Bitmap.Size(m)
}
func (m *Bitmap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bitmap.DiscardUnknown(m)
}

var xxx_messageInfo_Bitmap proto.InternalMessageInfo

func (m *Bitmap) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Bitmap) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Bitmap) GetWords() []uint64 {
	if m != nil {
		return m.Words
	}
	return nil
}

func (m *Bitmap) GetRankIndex() []int32 {
	if m != nil {
		return m.RankIndex
	}
	return nil
}

func (m *Bitmap) GetRankIndexDense() *PolyArray {
	if m != nil {
		return m.RankIndexDense
	}
	return nil
}

func init() {
	proto.RegisterType((*Bitmap)(nil), "Bitmap")
}

func init() { proto.RegisterFile("bitmap.proto", fileDescriptor_bitmap_66c9c2c6b1caf771) }

var fileDescriptor_bitmap_66c9c2c6b1caf771 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xca, 0x2c, 0xc9,
	0x4d, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x2f, 0xc8, 0xcf, 0xa9, 0x4c, 0x2c,
	0x2a, 0x4a, 0xac, 0x84, 0x08, 0x28, 0x4d, 0x61, 0xe4, 0x62, 0x73, 0x02, 0xab, 0x10, 0x12, 0xe1,
	0x62, 0x75, 0xcb, 0x49, 0x4c, 0x2f, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0x70, 0x84,
	0x78, 0xb8, 0x18, 0xfd, 0x24, 0xb8, 0x14, 0x18, 0x35, 0x58, 0x83, 0x18, 0xfd, 0x40, 0x6a, 0xc2,
	0xf3, 0x8b, 0x52, 0x8a, 0x25, 0x44, 0x14, 0x98, 0x35, 0x58, 0x82, 0x20, 0x1c, 0x21, 0x19, 0x2e,
	0xce, 0xa0, 0xc4, 0xbc, 0x6c, 0xcf, 0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x39, 0x05, 0x66, 0x0d, 0xd6,
	0x20, 0x84, 0x80, 0x90, 0x11, 0x17, 0x1f, 0x9c, 0xe3, 0x92, 0x9a, 0x57, 0x9c, 0x2a, 0x21, 0xaf,
	0xc0, 0xa8, 0xc1, 0x6d, 0xc4, 0xa5, 0x17, 0x90, 0x9f, 0x53, 0xe9, 0x08, 0x72, 0x4c, 0x10, 0x9a,
	0x0a, 0x27, 0xf6, 0x28, 0x56, 0xb0, 0x2b, 0x93, 0xd8, 0xc0, 0xce, 0x34, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x98, 0x75, 0x9e, 0x3a, 0xc7, 0x00, 0x00, 0x00,
}
